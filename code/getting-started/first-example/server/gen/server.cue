package gen

import (
  hof "github.com/hofstadter-io/hof/schema"

  "github.com/hofstadter-io/hofmod-server/schema"
)

// Generator definition
#HofGenerator: hof.#HofGenerator & {

	// User inputs to this generator
	// -----------------------------
	
	// Base output directory, defaults to current
  Outdir: string | *"./"

	// Golang module name
	Module: string

	// The server design conforming to the server schema
  Server: schema.#Server

  PackageName: "" | *"github.com/hofstadter-io/hofmod-server"


  // Required internal fields
	// ------------------------

	// In is passed to every template
  In: {
    SERVER: Server
		ModuleImport: path.Clean("\(Module)/\(Outdir)")
  }

	// where the templates are defined within the generator module
  PartialsDir:  "./partials/"
  TemplatesDir: "./templates/"

	// This is an implementor helper created by the implemento
  OutdirConfig: {
    CiOutdir: string | *"\(Outdir)/ci/\(In.SERVER.serverName)"
    ServerOutdir: string | *"\(Outdir)/server"
  }

  basedir: "server/\(In.SERVER.serverName)"

	// Actual files generated by hof, flattened into a single list
  Out: [...hof.#HofGeneratorFile] & _All

  // Combine everything together and output files that might need to be generated
  _All: [
   for _, F in _OnceFiles { F },

   for _, F in _L1_RouteFiles { F },
   for _, F in _L2_RouteFiles { F },
  ]

  // Files that are not repeatedly used, they are generated once per server
  _OnceFiles: [...hof.#HofGeneratorFile] & [
    {
      TemplateName: "config.go"
      Filepath: "\(Outdir)/config/config.go"
    },
		{
			TemplateName: "db/common.go"
			Filepath: "\(Outdir)/db/common.go"
		},
		{
			TemplateName: "db/migrate.go"
			Filepath: "\(Outdir)/db/migrate.go"
		},
		{
			TemplateName: "db/seed.go"
			Filepath: "\(Outdir)/db/seed.go"
		},
		{
			TemplateName: "db/postgres.go"
			Filepath: "\(Outdir)/db/postgres.go"
		},
		{
			TemplateName: "client/do.go"
			Filepath: "\(Outdir)/client/do.go"
		},
		{
			TemplateName: "client/client.go"
			Filepath: "\(Outdir)/client/client.go"
		},
    {
      TemplateName: "server.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/server.go"
    },
    {
      TemplateName: "router.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/router.go"
    },
    {
      TemplateName: "middleware.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/middleware.go"
    },
		{
			TemplateName: "auth/middleware.go"
			Filepath: "\(OutdirConfig.ServerOutdir)/auth/middleware.go"
		},
		{
			TemplateName: "auth/apikey.go"
			Filepath: "\(OutdirConfig.ServerOutdir)/auth/apikey.go"
		},
		{
			TemplateName: "auth/accts.go"
			Filepath: "\(OutdirConfig.ServerOutdir)/auth/accts.go"
		},
		if Server.EntityConfig.users {
			{
				TemplateName: "auth/user.go"
				Filepath: "\(OutdirConfig.ServerOutdir)/auth/user.go"
			}
		}
		if Server.EntityConfig.groups {
			{
				TemplateName: "auth/group.go"
				Filepath: "\(OutdirConfig.ServerOutdir)/auth/group.go"
			}
		}
		if Server.EntityConfig.organizations {
			{
				TemplateName: "auth/organization.go"
				Filepath: "\(OutdirConfig.ServerOutdir)/auth/organization.go"
			}
		}
  ]

	// Routes
  _L1_RouteFiles: [...hof.#HofGeneratorFile] & list.FlattenN([[
    for _, R in Server.Routes
    {
      In: {
        ROUTE: {
          R
          PackageName: "routes"
        }
      }
      TemplateName: "route.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/routes/\(In.ROUTE.name).go"
		}
	]], 1)

  _L2_RouteList: [ for P in _L1_RouteFiles if len(P.In.ROUTE.Routes) > 0 {
    [ for R in P.In.ROUTE.Routes { R,  Parent: { name: P.In.ROUTE.name } }]
  }]
  _L2_RouteFiles: [...hof.#HofGeneratorFile] & [ // List comprehension
    for _, R in list.FlattenN(_L2_RouteList, 1)
    {
      In: {
				ROUTE: {
					R
          PackageName: R.Parent.name
				}
      }
      TemplateName: "route.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/routes/\(R.Parent.name)/\(R.name).go"
    }
  ]

	...
}

